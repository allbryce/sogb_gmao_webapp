@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "gridDonneesDeBase";
        settings.KeyFieldName = DbColumns.CodeFonction;
        settings.CallbackRouteValues = new { Controller = SinbaConstants.Controllers.ProfilRight, Action = SinbaConstants.Actions.ListPartial, idProfil = ViewBag.IdProfil };
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Styles.Header.Font.Bold = true;

        // Pagination
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        // Buttons column: Add, Edit, Delete
        settings.Columns.Add(column =>
        {
            column.Width = Unit.Pixel(57);
            column.Caption = Strings.NumberSign;
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(CssClasses.EditDeleteButtonAlign,
                    // Button Edit
                    (bool)ViewBag.CanEdit ?
                    Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Edit, null, new { idProfil = ViewBag.IdProfil, codeFonction = DataBinder.Eval(c.DataItem, DbColumns.CodeFonction) },
                        new { @class = CssClasses.PencilIcon, title = CommonResource.btnEditTooltip }) :
                    Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PencilIconDisabled, title = CommonResource.btnTooltipNotAuthorised }),

                    // Button Delete
                    (bool)ViewBag.CanDelete ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Delete, null, new { idProfil = ViewBag.IdProfil, codeFonction = DataBinder.Eval(c.DataItem, DbColumns.CodeFonction) },
                            new { @class = CssClasses.TrashIcon, title = CommonResource.btnDeleteTooltip, onclick = Strings.DeleteConfirmMsg }) :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.TrashIconDisabled, title = CommonResource.btnTooltipNotAuthorised })
                );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    // Button Add (column header)
                    (bool)ViewBag.CanAdd ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Add, null, new { idProfil = ViewBag.IdProfil }, new { @class = CssClasses.PlusIcon, title = CommonResource.btnAddTooltip }).ToHtmlString() :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PlusIconDisabled, title = CommonResource.btnTooltipNotAuthorised }).ToHtmlString()
                );
            });
            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        });

        settings.Columns.Add(column =>

        {
            column.Caption = "Composant";
            Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.EditComposant, null, new { id = "ComposantId" }, new { @class = CssClasses.FolderIcon, title = CommonResource.btnEditTooltip });

        });
        // Code fonction
        settings.Columns.Add(c => ViewHelper.GridViewDefaultColumn(c, DbColumns.CodeFonction,
            caption: EntityColumnResource.Fonction));

        // Liste actions
        settings.Columns.Add(c => ViewHelper.GridViewDefaultColumn(c, ResourceNames.Entity.Actions,
            caption: EntityColumnResource.Actions));

        // Keeping grid state
        settings.ClientLayout = (s, e) =>
        {
            if (e.LayoutMode == ClientLayoutMode.Loading)
            {
                if (Session[Strings.GridStateProfilRight] != null)
                    e.LayoutData = (string)Session[Strings.GridStateProfilRight];
            }
            else
                Session[Strings.GridStateProfilRight] = e.LayoutData;
        };

    }).Bind(Model).GetHtml()

@Html.DevExpress().GridView(

   settings =>

   {


       settings.Name = "gridDonneesDeBase";


       settings.CallbackRouteValues = new { Controller = SinbaConstants.Controllers.DonneesDeBase, Action = SinbaConstants.Actions.ListPartial };
       //settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
       // Pagination
       settings.SettingsPager.FirstPageButton.Visible = true;
       settings.SettingsPager.LastPageButton.Visible = true;
       settings.SettingsPager.PageSizeItemSettings.Visible = true;
       settings.CommandColumn.ShowNewButtonInHeader = true;
       settings.CommandColumn.Visible = true;
       settings.CommandColumn.ShowCancelButton = true;
       settings.CommandColumn.ShowDeleteButton = true;


       // Composant

       



       // Unité

       settings.Columns.Add(column =>
       {
           column.Caption = "Unité";
           Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.EditUnite, null, new { id = "UniteId" }, new { @class = CssClasses.FolderIcon, title = CommonResource.btnEditTooltip });
       });


       // Caractéristique

       settings.Columns.Add(column =>

       {

           column.Caption = "Caractéristique";
           Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.EditCaracteristique, null, new { id = "CaracteristiqueId" }, new { @class = CssClasses.FolderIcon, title = CommonResource.btnEditTooltip });
       });






       // Keeping grid state
       settings.ClientLayout = (s, e) =>

       {

           if (e.LayoutMode == ClientLayoutMode.Loading)

           {

               if (Session[Strings.GridStateDepartement] != null)

                   e.LayoutData = (string)Session[Strings.GridStateDepartement];

           }

           else

               Session[Strings.GridStateDepartement] = e.LayoutData;

       };



   }).Bind(Model).GetHtml()
