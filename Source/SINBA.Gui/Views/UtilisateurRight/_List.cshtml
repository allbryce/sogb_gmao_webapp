@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "gridUtilisateurRight";
        settings.KeyFieldName = DbColumns.CodeFonction;
        settings.CallbackRouteValues = new { Controller = SinbaConstants.Controllers.UtilisateurRight, Action = SinbaConstants.Actions.ListPartial, idUtilisateur = ViewBag.IdUtilisateur };
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Styles.Header.Font.Bold = true;

        // Pagination
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        
        // Buttons column: Add, Edit, Delete
        settings.Columns.Add(column =>
        {
            column.Width = Unit.Pixel(57);
            column.Caption = Strings.NumberSign;
            column.SetDataItemTemplateContent(c =>
            {
                bool? profilRight = (bool?)DataBinder.Eval(c.DataItem, ResourceNames.Entity.FromProfil);
                
                if(!profilRight.HasValue || !profilRight.Value)
                {
                    ViewContext.Writer.Write(CssClasses.EditDeleteButtonAlign,
                    // Button Edit
                    (bool)ViewBag.CanEdit ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Edit, null, new { idUtilisateur = ViewBag.IdUtilisateur, codeFonction = DataBinder.Eval(c.DataItem, DbColumns.CodeFonction), codeAction = DataBinder.Eval(c.DataItem, DbColumns.CodeAction) },
                            new { @class = CssClasses.PencilIcon, title = CommonResource.btnEditTooltip }) :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PencilIconDisabled, title = CommonResource.btnTooltipNotAuthorised }),

                    // Button Delete
                    (bool)ViewBag.CanDelete ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Delete, null, new { idUtilisateur = ViewBag.IdUtilisateur, codeFonction = DataBinder.Eval(c.DataItem, DbColumns.CodeFonction), codeAction = DataBinder.Eval(c.DataItem, DbColumns.CodeAction) },
                            new { @class = CssClasses.TrashIcon, title = CommonResource.btnDeleteTooltip, onclick = Strings.DeleteConfirmMsg }) :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.TrashIconDisabled, title = CommonResource.btnTooltipNotAuthorised })
                    );
                }
                
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    // Button Add (column header)
                    (bool)ViewBag.CanAdd ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Add, null, new { idUtilisateur = ViewBag.IdUtilisateur }, new { @class = CssClasses.PlusIcon, title = CommonResource.btnAddTooltip }).ToHtmlString() :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PlusIconDisabled, title = CommonResource.btnTooltipNotAuthorised }).ToHtmlString()
                );
            });
            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        });

        // Code fonction
        settings.Columns.Add(c => ViewHelper.GridViewDefaultColumn(c, DbColumns.CodeFonction,
            caption: EntityColumnResource.Fonction));
        
        // Code action
        settings.Columns.Add(c => ViewHelper.GridViewDefaultColumn(c, ResourceNames.Entity.CodeAction,
            caption: EntityColumnResource.Action));

        // Bloquer l'accès
        settings.Columns.Add(c =>
        {
            ViewHelper.GridViewDefaultColumn(c, DbColumns.DenyAccess, caption: EntityColumnResource.DenyAccess, columnType: MVCxGridViewColumnType.CheckBox);
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        });

        // Profil
        settings.Columns.Add(c =>
        {
            ViewHelper.GridViewDefaultColumn(c, ResourceNames.Entity.FromProfil, caption: EntityColumnResource.Profil, columnType: MVCxGridViewColumnType.CheckBox);
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        });

        // Keeping grid state
        settings.ClientLayout = (s, e) =>
        {
            if (e.LayoutMode == ClientLayoutMode.Loading)
            {
                if (Session[Strings.GridStateUtilisateurRight] != null)
                    e.LayoutData = (string)Session[Strings.GridStateUtilisateurRight];
            }
            else
                Session[Strings.GridStateUtilisateurRight] = e.LayoutData;
        };
            
    }).Bind(Model).GetHtml()
