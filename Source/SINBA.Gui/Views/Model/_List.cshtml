@Html.DevExpress().GridView(

    settings =>

    {

        settings.Name = "gridModel";
        settings.KeyFieldName = DbColumns.NumeroModel;
        settings.CallbackRouteValues = new { Controller = SinbaConstants.Controllers.Model, Action = SinbaConstants.Actions.ListPartial };
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Styles.Header.Font.Bold = true;
        // Pagination

        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        // Buttons column: Add, Edit, Delete

        settings.Columns.Add(column =>

        {
            column.Width = Unit.Pixel(57);
            column.Caption = Strings.NumberSign;
            column.SetDataItemTemplateContent(c =>

            {

                ViewContext.Writer.Write(CssClasses.EditDeleteButtonAlign,

                    // Button Edit

                    (bool)ViewBag.CanEdit ?
                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Edit, null, new { id = DataBinder.Eval(c.DataItem, DbColumns.NumeroModel) },
                            new { @class = CssClasses.PencilIcon, title = CommonResource.btnEditTooltip }) :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PencilIconDisabled, title = CommonResource.btnTooltipNotAuthorised }),

                    // Button Delete

                    (bool)ViewBag.CanDelete ?
                    (bool)DataBinder.Eval(c.DataItem, DbColumns.IsUsed) ?
                    Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.TrashIconDisabled, title = CommonResource.btnDeleteIsUsed }) :
                    Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Delete, null, new { id = DataBinder.Eval(c.DataItem, DbColumns.NumeroModel) },
                    new { @class = CssClasses.TrashIcon, title = CommonResource.btnDeleteTooltip, onclick = Strings.DeleteConfirmMsg }) :
                    Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.TrashIconDisabled, title = CommonResource.btnTooltipNotAuthorised })
                );
            });

            column.SetHeaderTemplateContent(c =>

            {

                ViewContext.Writer.Write(

                    // Button Add (column header)

                    (bool)ViewBag.CanAdd ?

                        Html.ActionLink(Strings.EmptyLink, SinbaConstants.Actions.Add, null, null, new { @class = CssClasses.PlusIcon, title = CommonResource.btnAddTooltip }).ToHtmlString() :
                        Html.Label(Strings.EmptyLink, null, new { @class = CssClasses.PlusIconDisabled, title = CommonResource.btnTooltipNotAuthorised }).ToHtmlString()
                );

            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

        });

        // Code

        settings.Columns.Add(column =>

        {
            column.FieldName = "NumeroModel";
            column.Caption = "Id";
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        // Libelle
        settings.Columns.Add(column =>

        {
            column.FieldName = "LibelleModel";
            column.Caption = "Model";
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        });
        settings.Columns.Add(column =>
    {
        column.FieldName = "Marque.LibelleMarque";
        column.Caption = "Marque";
        column.Settings.AllowCellMerge = DefaultBoolean.False;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        column.Width = Unit.Pixel(200);
    });

        // Keeping grid state

        settings.ClientLayout = (s, e) =>
        {

            if (e.LayoutMode == ClientLayoutMode.Loading)
            {
                if (Session[Strings.Acces] != null)
                    e.LayoutData = (string)Session[Strings.GridStateDirection];
            }
            else
                Session[Strings.GridStateDirection] = e.LayoutData;

        };



    }).Bind(Model).GetHtml()